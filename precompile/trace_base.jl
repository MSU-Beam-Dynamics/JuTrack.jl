precompile(Tuple{typeof(Base.vect), Base.Dict{String, Any}, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), Array{String, 1}, Vararg{Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(Base.escape_string), String})
precompile(Tuple{Base.var"#598#599"{Tuple{}, String, Tuple{Char}}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{Type{PyCall.PyError}, String, PyCall.PyError})
precompile(Tuple{Type{Base.VersionNumber}, Int32, Int32, Int32})
precompile(Tuple{typeof(LLVMExtra_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Enzyme_jll.find_artifact_dir)})
precompile(Tuple{typeof(LibTracyClient_jll.find_artifact_dir)})
precompile(Tuple{typeof(Tracy.__init__)})
precompile(Tuple{typeof(Base.contains), String, String})
precompile(Tuple{typeof(Base.convert), Type{UInt8}, Bool})
precompile(Tuple{Type{Pair{A, B} where B where A}, Base.Regex, String})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, LLVM.Use, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{NamedTuple{(:offsetAllowed, :inttoptr), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Union{TypeVar, Type}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.:(==)), Nothing, Type})
precompile(Tuple{typeof(Base.:(==)), Nothing, GPUCompiler.ArgumentCC})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{GPUCompiler.ArgumentCC, GPUCompiler.ArgumentCC}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Base.ScopedValues.ScopedValue{T} where T}, Base.ScopedValues.ScopedValue{Base.CoreLogging.LogState}})
precompile(Tuple{Type{NamedTuple{(:vararg,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}}, Ptr{Nothing}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LLVM.Value, Type, LLVM.Value}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{NamedTuple{(:allow_boxed,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.isbitstype), Any})
precompile(Tuple{Type{UInt8}, Bool})
precompile(Tuple{Type{NamedTuple{(:firstconst, :endcast, :firstconst_after_tape, :runtime_activity, :strong_zero), T} where T<:Tuple}, NTuple{5, Bool}})
precompile(Tuple{Type{NamedTuple{(:endcast, :runtime_activity, :strong_zero), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:kernel,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:optimize,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(<:), Type})
precompile(Tuple{Type{Pair{Any, Tuple{Bool, Bool}}}, Any, Any})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{typeof(Base.abs), Int64})
precompile(Tuple{typeof(Base.top_set_bit), UInt64})
precompile(Tuple{Type{NamedTuple{(:cleanup,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Int64}, Int32})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LLVM.Instruction, LLVM.Instruction}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Symbol, Type}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.:(<=)), UInt32, Int64})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, LLVM.Value, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.min), Int64, Int64})
precompile(Tuple{typeof(Base.split_sign), UInt64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt64, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt64, Bool}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:pad,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(+)), Bool, Int64})
precompile(Tuple{typeof(Base.abs), UInt64})
precompile(Tuple{typeof(Base.unsigned), UInt64})
precompile(Tuple{typeof(Base.:(>)), UInt32, Int64})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LLVM.Value, LLVM.BasicBlock}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), Base.Set{String}, Symbol})
precompile(Tuple{Type{Base.KeySet{K, T} where T<:(Base.AbstractDict{K, V} where V) where K}, Base.Dict{String, Nothing}})
precompile(Tuple{typeof(Base.getproperty), Base.KeySet{String, Base.Dict{String, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.in), String, NTuple{4, String}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LLVM.Instruction, LLVM.Value}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LLVM.Value, LLVM.Instruction}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{NamedTuple{(:kernel, :libraries, :toplevel, :optimize, :cleanup, :only_entry, :validate), T} where T<:Tuple}, NTuple{7, Bool}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LLVM.Value, Tuple}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LLVM.Value, Tuple, LLVM.Value}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{}, typeof(Base.identity)}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:toplevel, :always_inline, :kernel, :libraries, :optimize, :cleanup, :only_entry, :validate), T} where T<:Tuple}, NTuple{8, Bool}})
precompile(Tuple{typeof(Base.:(*)), Vararg{String, 4}})
precompile(Tuple{Type{NamedTuple{(:triple,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LLVM.Value, LLVM.Value, LLVM.LLVMType}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{NamedTuple{(:unoptimize_throw_blocks,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.cconvert), Type, Float64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Float64}, Float64})
precompile(Tuple{typeof(Enzyme.Compiler.julia_error), Base.Cstring, Ptr{LLVM.API.LLVMOpaqueValue}, Enzyme.API.ErrorType, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{LLVM.API.LLVMOpaqueBuilder}})
precompile(Tuple{typeof(Enzyme.Compiler.julia_sanitize), Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.emit_inacterror), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.julia_default_tape_type), Ptr{LLVM.API.LLVMOpaqueContext}})
precompile(Tuple{typeof(Enzyme.Compiler.julia_allocator), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueType}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{LLVM.API.LLVMOpaqueValue}, UInt8, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.julia_post_cache_store), Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{UInt64}})
precompile(Tuple{typeof(Enzyme.Compiler.fixup_return), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.shadow_alloc_rewrite), Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}, UInt64, Ptr{LLVM.API.LLVMOpaqueValue}, UInt8})
precompile(Tuple{typeof(Enzyme.Compiler.enzyme_custom_diffuse_cfunc), Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}, UInt8, Enzyme.API.CDerivativeMode, Ptr{UInt8}})
precompile(Tuple{typeof(Enzyme.Compiler.jlcall_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.jlcall_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.jlcall2_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.jlcall2_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.generic_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.generic_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.invoke_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.invoke_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.apply_latest_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.apply_latest_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.threadsfor_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.threadsfor_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.newtask_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.newtask_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.newtask_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.set_task_tid_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.enzyme_custom_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.enzyme_custom_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.enzyme_custom_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.noop_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.noop_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.arraycopy_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.arraycopy_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.genericmemory_copy_slice_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.genericmemory_copy_slice_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.genericmemory_copyto_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.genericmemory_copyto_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.genericmemory_copyto_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.genericmemory_slice_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.genericmemory_slice_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.genericmemory_slice_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.arrayreshape_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.arrayreshape_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.arrayreshape_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.setfield_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.setfield_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.setfield_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.boxfloat_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.f_tuple_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.f_tuple_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.eqtableget_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.eqtableget_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.eqtableget_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.eqtableput_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.eqtableput_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.eqtableput_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.idtablerehash_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.idtablerehash_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.idtablerehash_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.apply_iterate_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.apply_iterate_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.f_svec_ref_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.f_svec_ref_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.f_svec_ref_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.new_structv_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.new_structv_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.new_structt_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.new_structt_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.get_binding_or_error_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.get_binding_or_error_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.get_binding_or_error_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.finalizer_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.finalizer_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.finalizer_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.deferred_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.deferred_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.deferred_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_getfield_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_getfield_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_getfield_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_nthfield_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_nthfield_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_array_sizehint_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_array_ptr_copy_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_ptr_to_array_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_unhandled_augfwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_unhandled_rev_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Enzyme.Compiler.jl_unhandled_fwd_cfunc), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Nothing}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}})
precompile(Tuple{typeof(Enzyme.Compiler.__init__)})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetHandler), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetSanitizeDerivatives), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetRuntimeInactiveError), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetDefaultTapeType), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetCustomAllocator), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetCustomDeallocator), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetPostCacheStore), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetCustomZero), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetFixupReturn), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetUndefinedValueForType), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.API.EnzymeSetShadowAllocRewrite), Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.Compiler.array_shadow_handler), Ptr{LLVM.API.LLVMOpaqueBuilder}, Ptr{LLVM.API.LLVMOpaqueValue}, UInt64, Ptr{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Nothing}})
precompile(Tuple{typeof(Enzyme.Compiler.register_alloc_rules)})
precompile(Tuple{typeof(Enzyme.Compiler.register_alloc_handler!), NTuple{10, String}, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(OpenSpecFun_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.issorted), Array{String, 1}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(Rmath_jll.find_artifact_dir)})
precompile(Tuple{typeof(Distributions.TestUtils.__init__)})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Main.include), String})
precompile(Tuple{typeof(Pkg.API.activate), String})
precompile(Tuple{Pkg.API.var"##activate#233", Bool, Bool, Base.IOContext{IO}, typeof(Pkg.API.activate), String})
precompile(Tuple{typeof(Base.lock), Base.TTY})
precompile(Tuple{typeof(Base.repeat), Char, Int64})
precompile(Tuple{typeof(Base.unlock), Base.TTY})
precompile(Tuple{Type{Array{Dates.DateTime, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.maximum), Array{Dates.DateTime, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Dates.DateTime})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{String, Dates.DateTime}, 1}})
precompile(Tuple{typeof(TOML.Internals.Printer.is_array_of_tables), Array{Base.Dict{String, Dates.DateTime}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(TOML.Internals.Printer.print_table), Nothing, Base.IOStream, Base.Dict{String, Dates.DateTime}, Array{String, 1}})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Any, 1}})
precompile(Tuple{typeof(Base.similar), Array{String, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, String, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Union{Array{String, 1}, String}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Array{String, 1}, String}}, Array{String, 1}, String})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.UUID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Union{Array{String, 1}, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Array{String, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.Dict{String, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{GenericMemory{:not_atomic, String, Core.AddrSpace{Core}(0x00)}}, UndefInitializer, Int64})
precompile(Tuple{Type{NamedTuple{(:isbare,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:refspecs,), T} where T<:Tuple}, Tuple{Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:strict,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.something), Nothing, String, Vararg{String}})
precompile(Tuple{typeof(Base.something), String})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Int64}, Int64})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Base.UUID, String}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{NamedTuple{(:fakeit,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:registry,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.first), Tuple{String, String}})
precompile(Tuple{Type{NamedTuple{(:io, :skip_writing_project), T} where T<:Tuple}, Tuple{Base.DevNull, Bool}})
precompile(Tuple{Type{NamedTuple{(:update_undo,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Nothing})
precompile(Tuple{Type{NamedTuple{(:already_instantiated,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:allow_autoprecomp,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Pkg.API.instantiate)})
precompile(Tuple{typeof(Base.setindex!), GenericMemory{:not_atomic, Union{Base.Libc.RawFD, Base.Libc.WindowsRawSocket, Base.SyncCloseFD, IO}, Core.AddrSpace{Core}(0x00)}, Base.TTY, Int64})
precompile(Tuple{typeof(Base.unsafe_read), Base.PipeEndpoint, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), Base.PipeEndpoint, Array{UInt8, 1}, Int64})
precompile(Tuple{Base.var"#893#896"{Base.Process}})
precompile(Tuple{typeof(Base.uv_shutdowncb_task), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Base.closewrite), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{UInt32, UInt32}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{UInt32}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.UUID, Tuple{String, Union{Nothing, Base.VersionNumber}}}, Tuple{String, Base.VersionNumber}, Base.UUID})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.UUID, Tuple{String, Union{Nothing, Base.VersionNumber}}}, Tuple{String, Nothing}, Base.UUID})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}, String}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}, String}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Pkg.Types.PackageSpec, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:internal_call, :strict, :warn_loaded, :timing, :_from_loading, :configs, :io), Tuple{Bool, Bool, Bool, Bool, Bool, Pair{Base.Cmd, Base.CacheFlags}, Base.TTY}}, typeof(Base.Precompilation.precompilepkgs), Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Base.Set{Base.PkgId}}, Base.PkgId})
precompile(Tuple{typeof(Base.issubset), Array{Base.PkgId, 1}, Base.Set{Base.PkgId}})
precompile(Tuple{Base.Precompilation.var"#22#62"{Bool, Array{Pair{Base.Cmd, Base.CacheFlags}, 1}, Bool, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, String}, Base.Set{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}}, String, String, String, String, Base.Precompilation.var"#ansi_moveup#54", Base.Event, Base.Event, Base.ReentrantLock, Array{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, 1}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, String}, Array{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, 1}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, Bool}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, Bool}, Array{Base.PkgId, 1}, Base.Precompilation.var"#describe_pkg#42"{Base.Dict{Base.PkgId, String}, Base.Precompilation.var"#color_string#41"{Bool}, Int64}, Base.Dict{Base.PkgId, Array{Base.PkgId, 1}}, Base.Precompilation.var"#color_string#41"{Bool}}})
precompile(Tuple{Base.Precompilation.var"#29#69"{Bool, Bool, Bool, Array{Task, 1}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, String}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Base.Event, Base.Event, Base.ReentrantLock, Array{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, 1}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, String}, Array{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, 1}, Array{Base.PkgId, 1}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, Bool}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, Base.Event}, Base.Dict{Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}, Bool}, Array{Base.PkgId, 1}, Base.Precompilation.var"#describe_pkg#42"{Base.Dict{Base.PkgId, String}, Base.Precompilation.var"#color_string#41"{Bool}, Int64}, Base.Dict{Base.PkgId, Array{Base.PkgId, 1}}, Base.Dict{Base.PkgId, String}, Base.Dict{Base.PkgId, Array{String, 1}}, Base.Dict{Tuple{Base.PkgId, UInt128, String, String}, Bool}, Base.Precompilation.var"#color_string#41"{Bool}, Bool, Base.Semaphore, Bool, String, Array{String, 1}, Array{Base.PkgId, 1}, Base.PkgId, Base.CacheFlags, Base.Cmd, Pair{Base.Cmd, Base.CacheFlags}, Tuple{Base.PkgId, Pair{Base.Cmd, Base.CacheFlags}}}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Array{String, 1}}, Base.Dict{String, Array{String, 1}}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Base.Dict{String, String}}, Base.Dict{String, Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{typeof(JuTrack.TPSAadStatic.set_tps_dim), Int64})
precompile(Tuple{typeof(Base.:(+)), Int32, Int64})
precompile(Tuple{typeof(Serialization.deserialize), String})
precompile(Tuple{Type{Array{JuTrack.AbstractElement{Float64}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{JuTrack.AbstractElement{Float64}, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{JuTrack.AbstractElement{Float64}, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, DataType})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.MARKER{Float64}, Int64})
precompile(Tuple{Type{Array{Float64, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Float64, 1}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{Float64, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.DRIFT{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.QUAD{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.SBEND{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.CRABCAVITY{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.SOLENOID{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.KSEXT{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.thinMULTIPOLE{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.CORRECTOR{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.RFCA{Float64}, Int64})
precompile(Tuple{typeof(JuTrack.Number2TPSAD), Array{JuTrack.AbstractElement{Float64}, 1}})
precompile(Tuple{typeof(JuTrack.Number2TPSAD), Array{JuTrack.AbstractElement{Float64}, 1}, Type{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.MARKER{Float64}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, Type{Base.MappingRF{F, T} where T where F}, Type})
precompile(Tuple{StaticArraysCore.var"##s4#1", Vararg{Any, 9}})
precompile(Tuple{typeof(Base._all), StaticArraysCore.var"#2#3", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Type, Function, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.:(*)), Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Type{Int64}, typeof(Base.min), Int64, Tuple{Int64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{7}, Float64, 1, 7}}, NTuple{7, Float64}})
precompile(Tuple{Type{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Float64, StaticArraysCore.SArray{Tuple{7}, Float64, 1, 7}})
precompile(Tuple{Type{JuTrack.MARKER{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, String})
precompile(Tuple{typeof(Base._array_for), Type{JuTrack.MARKER{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.MARKER{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}, JuTrack.MARKER{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Base.Generator{Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.var"#54#55"{7, Float64}}, Int64})
precompile(Tuple{typeof(Base.tail), NTuple{9, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{8, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{7, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{6, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{5, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{4, Symbol}})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base._array_for), Type{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Base.Generator{Array{Float64, 1}, JuTrack.var"#50#51"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{JuTrack.MARKER{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}, JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}, Base.Generator{Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.var"#54#55"{7, Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.tail), NTuple{11, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{10, Symbol}})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.QUAD{Float64}})
precompile(Tuple{typeof(Base.tail), NTuple{27, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{26, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{25, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{24, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{23, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{22, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{21, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{20, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{19, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{18, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{17, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{16, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{15, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{14, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{13, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{12, Symbol}})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.SBEND{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.CRABCAVITY{Float64}})
precompile(Tuple{Type{JuTrack.CRABCAVITY{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, String})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.SOLENOID{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.KSEXT{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.thinMULTIPOLE{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.CORRECTOR{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{7, Float64}, JuTrack.RFCA{Float64}})
precompile(Tuple{Type{JuTrack.RFCA{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, String})
precompile(Tuple{typeof(Main.Q_perturb), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}})
precompile(Tuple{typeof(JuTrack.findelem), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}, Type})
precompile(Tuple{typeof(Base.iterate), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Base.iterate), Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{Type{Printf.Format{S, T} where T where S}, String})
precompile(Tuple{Type{Printf.Format{S, T} where T where S}, Base.CodeUnits{UInt8, String}, Array{Base.UnitRange{Int64}, 1}, Tuple{Printf.Spec{Base.Val{Char(0x66000000)}}, Printf.Spec{Base.Val{Char(0x66000000)}}, Printf.Spec{Base.Val{Char(0x64000000)}}, Vararg{Printf.Spec{Base.Val{Char(0x66000000)}}, 7}}, Int64})
precompile(Tuple{Type{NamedTuple{(:E0, :m0), T} where T<:Tuple}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Core.checked_dims), Int64, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Core._checked_mul_dims), Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(LinearAlgebra.norm), Float64})
precompile(Tuple{typeof(Base.float), Float64})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(LinearAlgebra.norm), typeof(Base.max)}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.ComposedFunction{typeof(Base.float), typeof(LinearAlgebra.norm)}, typeof(Base.:(+))}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(LinearAlgebra.norm), typeof(Base.min)}, Symbol})
precompile(Tuple{typeof(Base.:(-)), LinearAlgebra.UniformScaling{Bool}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:init,), Tuple{Float64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Float64}}}})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{Base.Iterators.var"#10#11"{Tuple{Base.UnitRange{Int64}, Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base._similar_shape), Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.OneTo{Int64}}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.to_shape), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Core.Compiler.setindex!), Array{Core.Compiler.CallInfo, 1}, Core.Compiler.InvokeCallInfo, Int64})
precompile(Tuple{Type{NamedTuple{(:mode,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{13, Symbol}})
precompile(Tuple{typeof(Base.sqrt), Float64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{2}})
precompile(Tuple{typeof(Base.sin), Float64})
precompile(Tuple{typeof(Base.cos), Float64})
precompile(Tuple{typeof(Base.in), Tuple{Char, Char, Char}})
precompile(Tuple{typeof(LinearAlgebra._chkstride1), Bool})
precompile(Tuple{typeof(Base.:(==)), Char, Char})
precompile(Tuple{typeof(Base.in), Char, Tuple{Char, Char, Char}})
precompile(Tuple{typeof(Base.in), Char, Tuple{Char, Char}})
precompile(Tuple{Type{LinearAlgebra.MulAddMul{ais1, bis0, TA, TB} where TB where TA where bis0 where ais1}, Bool, Bool})
precompile(Tuple{typeof(Base.getproperty), LinearAlgebra.MulAddMul{true, true, Bool, Bool}, Symbol})
precompile(Tuple{typeof(Base.iszero), Bool})
precompile(Tuple{typeof(Base.promote), Bool, Bool, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Float64}, Float64})
precompile(Tuple{typeof(Base.map), Base.Fix2{typeof(Base.in), Tuple{Char, Char, Char}}, Tuple{Char, Char}})
precompile(Tuple{typeof(Base.all), Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.getproperty), LinearAlgebra.UniformScaling{Bool}, Symbol})
precompile(Tuple{Type{Float64}, Bool})
precompile(Tuple{typeof(LinearAlgebra.diagind), Int64, Int64})
precompile(Tuple{Base.var"##s1116#692", Vararg{Any, 6}})
precompile(Tuple{Type{Signed}, UInt64})
precompile(Tuple{Base.var"##s1116#691", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{66}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{-27}})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.getproperty), StaticArrays.Args{Tuple{}}, Symbol})
precompile(Tuple{StaticArrays.var"##s26#84", Any, Any, Any})
precompile(Tuple{typeof(Base.isqrt), Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{2}})
precompile(Tuple{StaticArrays.var"##s26#2", Any, Any, Any})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Union{}, 1}, Array{Union{}, 1}}}, Int64})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(Base.tail), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._cshp), Int64, Tuple{Bool, Bool}, Tuple{}, Tuple{Int64}})
precompile(Tuple{typeof(Base.tail), Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base._cshp), Int64, Tuple{Bool}, Tuple{Int64}, Tuple{}})
precompile(Tuple{typeof(Base._cat_size_shape), Tuple{Bool, Bool}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.count), Function, Tuple{Bool, Bool}})
precompile(Tuple{Base.var"##mapfoldl#335", Int64, typeof(Base.mapfoldl), Function, Function, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#361#362"{Base.ComposedFunction{typeof(Base.:(!)), typeof(Base.iszero)}}, typeof(Base.add_sum), Int64, Tuple{Bool, Bool}})
precompile(Tuple{Base.var"#58#59", Type})
precompile(Tuple{typeof(Base._any_tuple), Base.var"#58#59", Bool, Type})
precompile(Tuple{Base.Iterators.var"#10#11"{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.:(<)), UInt32, Int64})
precompile(Tuple{typeof(Base.:(|)), Int32, Int32})
precompile(Tuple{typeof(Base.checkindex), Type{Bool}, Base.OneTo{Int64}, Int64})
precompile(Tuple{Type{Base.Returns{V} where V}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.ntuple), Base.Returns{Base.OneTo{Int64}}, Base.Val{2}})
precompile(Tuple{typeof(Base._cshp), Int64, Tuple{Bool}, Tuple{}, Tuple{Int64}})
precompile(Tuple{typeof(Base._cat_size_shape), Tuple{Bool}, Tuple{Int64}})
precompile(Tuple{Base.var"#325#329"{Tuple{Int64}}, Int64})
precompile(Tuple{typeof(Base._any_tuple), Base.var"#58#59", Bool, Type, Type})
precompile(Tuple{typeof(Base.ntuple), Base.Returns{Base.OneTo{Int64}}, Base.Val{1}})
precompile(Tuple{typeof(Base.:(<=)), Int64, UInt8})
precompile(Tuple{typeof(Base.:(<=)), UInt8, Int64})
precompile(Tuple{typeof(Base.rem), UInt8, Type{Int64}})
precompile(Tuple{typeof(Base.:(<=)), Int32, UInt8})
precompile(Tuple{typeof(Base.:(<=)), UInt8, Int32})
precompile(Tuple{typeof(Base.rem), UInt8, Type{Int32}})
precompile(Tuple{typeof(Base.convert), Type{Signed}, UInt16})
precompile(Tuple{typeof(Base.convert), Type{Signed}, UInt8})
precompile(Tuple{Type{NamedTuple{(:modifier,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Main.multi_val_op), Array{Float64, 1}, Int64, Float64, Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}})
precompile(Tuple{typeof(Base.length), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), JuTrack.QUAD{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Symbol, Float64})
precompile(Tuple{typeof(Base.convert), Type{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#49#50"{7, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{7, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{7, Float64}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{7, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{7, Float64}}, Int64})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#53#54"{7, Float64}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{7, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{7, Float64}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{7, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{7, Float64}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(7,)}, StaticArraysCore.Size{(7,)}})
precompile(Tuple{typeof(Base.argtail), StaticArrays.SOneTo{7}})
precompile(Tuple{Type{StaticArraysCore.Size{S} where S}, Tuple{Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Int64}, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64}}, 1}, Base.Generator{Core.SimpleVector, StaticArrays.var"#166#168"}, Int64, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.OrdinalRange{Int64, Int64}, N}} where N}, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Tuple{Vararg{Int64}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}, Base.Iterators.Enumerate{Array{Tuple{Vararg{Int64}}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Vararg{Int64}}, 1}}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}, Tuple{Int64, Tuple{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Vararg{Int64}}, 1}}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}}, Tuple{Int64, Int64}})
precompile(Tuple{StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}, Tuple{Int64, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{}, 1}, Tuple{}, Base.Generator{Core.SimpleVector, StaticArrays.var"#166#168"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{}, 1}, Tuple{Int64}, Int64})
precompile(Tuple{StaticArrays.var"##s26#187", Vararg{Any, 8}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#188#190", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#188#190"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#189#191"{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#189#191"{Int64}}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:init,), Tuple{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Tuple{Symbol}, NamedTuple{(:init,), Tuple{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64})
precompile(Tuple{StaticArraysCore.var"##s4#4", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.ntuple), StaticArraysCore.var"#5#6", Base.Val{7}})
precompile(Tuple{typeof(Base.convert), Type{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:E0, :m0), Tuple{Float64, Float64}}, typeof(JuTrack.twissring), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}, Float64, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(+)), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.:(/)), Float64, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.:(-)), Float64, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{Type{JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Int64, Int64, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Array{Int64, 1}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Float64, Int64, Int64, Array{Int64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Float64}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Float64})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(Base.isone), Int64})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.QUAD{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(Base.:(/)), Base.Irrational{:π}, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:π}, Float64})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.SBEND{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.CRABCAVITY{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.SOLENOID{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.KSEXT{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.thinMULTIPOLE{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.CORRECTOR{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, Tuple{Int64, Int64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Float64})
precompile(Tuple{typeof(Base.zeros), Type{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Float64, Int64, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(+)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(-)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.transpose), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}})
precompile(Tuple{typeof(Base._getindex), Base.IndexCartesian, LinearAlgebra.Transpose{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:mode,), Tuple{Int64}}, Type{JuTrack.EdwardsTengTwiss{T} where T}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(LinearAlgebra.tr), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.:(<)), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Float64})
precompile(Tuple{typeof(Base.:(>)), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Float64})
precompile(Tuple{typeof(Base.abs), JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.:(==)), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.:(<)), Float64, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.sign), JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.:(-)), JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}})
precompile(Tuple{typeof(JuTrack.inv1), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64})
precompile(Tuple{Type{JuTrack.EdwardsTengTwiss{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, typeof(Base.to_index), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Int64, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}})
precompile(Tuple{typeof(Base.zeros), Type{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.copy), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 3}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 3}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.EdwardsTengTwiss{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}, Int64})
precompile(Tuple{typeof(Base.:(-)), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Float64})
precompile(Tuple{typeof(JuTrack.TPSAadStatic.Gradient), Function, Array{Float64, 1}, Bool})
precompile(Tuple{StaticArrays.var"##s26#585", Vararg{Any, 7}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#586#587", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#586#587"}})
precompile(Tuple{typeof(Base.setindex), StaticArraysCore.SArray{Tuple{7}, Float64, 1, 7}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#71#72"{Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Main.get_phase14_zero), Vararg{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 7}})
precompile(Tuple{typeof(Base.setproperty!), JuTrack.QUAD{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Symbol, JuTrack.TPSAadStatic.DTPSAD{7, Float64}})
precompile(Tuple{typeof(Base.getproperty), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.length), Tuple{Tuple{StaticArrays.SOneTo{7}}}}, Symbol})
precompile(Tuple{Base.var"##s1116#701", Vararg{Any, 8}})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), QuoteNode, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.:(==)), Expr, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.IteratorsMD.CartesianIndices{1, Tuple{StaticArrays.SOneTo{7}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.IteratorsMD.CartesianIndex{1}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{StaticArrays.SOneTo{7}}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{StaticArrays.SOneTo{7}}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Base.get), Tuple{StaticArrays.SOneTo{7}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(-)), Base.IteratorsMD.CartesianIndex{1}, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.checkbounds), StaticArrays.SOneTo{7}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.IteratorsMD.CartesianIndex{1}, Int64})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{7}, Int64})
precompile(Tuple{typeof(Base.collect), StaticArraysCore.SArray{Tuple{7}, Float64, 1, 7}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Float64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Printf.format), Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Base.Val{Char(0x66000000)}}, Printf.Spec{Base.Val{Char(0x66000000)}}, Printf.Spec{Base.Val{Char(0x64000000)}}, Vararg{Printf.Spec{Base.Val{Char(0x66000000)}}, 7}}}, Float64, Float64, Int64, Vararg{Any}})
precompile(Tuple{typeof(Printf.computelen), Array{Base.UnitRange{Int64}, 1}, Tuple{Printf.Spec{Base.Val{Char(0x66000000)}}, Printf.Spec{Base.Val{Char(0x66000000)}}, Printf.Spec{Base.Val{Char(0x64000000)}}, Vararg{Printf.Spec{Base.Val{Char(0x66000000)}}, 7}}, Tuple{Float64, Float64, Int64, Vararg{Float64, 7}}})
precompile(Tuple{typeof(Printf.format), Array{UInt8, 1}, Int64, Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Base.Val{Char(0x66000000)}}, Printf.Spec{Base.Val{Char(0x66000000)}}, Printf.Spec{Base.Val{Char(0x64000000)}}, Vararg{Printf.Spec{Base.Val{Char(0x66000000)}}, 7}}}, Float64, Vararg{Any}})
precompile(Tuple{Type{Printf.Spec{Base.Val{Char(0x66000000)}}}, Bool, Bool, Bool, Bool, Bool, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Printf.fmt), Array{UInt8, 1}, Int64, Float64, Printf.Spec{Base.Val{Char(0x66000000)}}})
precompile(Tuple{typeof(Printf.rmdynamic), Printf.Spec{Base.Val{Char(0x64000000)}}, Tuple{Float64, Float64, Int64, Vararg{Float64, 7}}, Int64})
precompile(Tuple{typeof(Printf.fmt), Array{UInt8, 1}, Int64, Int64, Printf.Spec{Base.Val{Char(0x64000000)}}})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, String})
precompile(Tuple{typeof(Base.print), Base.TTY, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Any, 1}, Array{Float64, 2}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Any, 1}, Array{Float64, 2}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:name, :len, :volt, :h, :freq, :energy), T} where T<:Tuple}, Tuple{String, Vararg{Float64, 5}}})
precompile(Tuple{Type{NamedTuple{(:name, :len), T} where T<:Tuple}, Tuple{String, Float64}})
precompile(Tuple{Type{NamedTuple{(:name,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:name, :len, :k1), T} where T<:Tuple}, Tuple{String, Float64, Float64}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{17, Symbol}})
precompile(Tuple{Type{NamedTuple{(:name, :len, :xkick, :ykick), T} where T<:Tuple}, Tuple{String, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{26, Symbol}})
precompile(Tuple{Type{NamedTuple{(:name, :len, :k2), T} where T<:Tuple}, Tuple{String, Float64, Float64}})
precompile(Tuple{typeof(Main.spear3)})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.KSEXT{Float64}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.SBEND{Float64}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.KQUAD{Float64}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.CORRECTOR{Float64}})
precompile(Tuple{typeof(JuTrack.Number2TPSAD), Array{JuTrack.AbstractElement{Float64}, 1}, Type{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}})
precompile(Tuple{JuTrack.var"#54#55"{6, Float64}, JuTrack.RFCA{Float64}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{6}, Float64, 1, 6}}, NTuple{6, Float64}})
precompile(Tuple{Type{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Float64, StaticArraysCore.SArray{Tuple{6}, Float64, 1, 6}})
precompile(Tuple{Type{JuTrack.RFCA{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, String})
precompile(Tuple{typeof(Base._array_for), Type{JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, 1}, JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Base.Generator{Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.var"#54#55"{6, Float64}}, Int64})
precompile(Tuple{JuTrack.var"#54#55"{6, Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base._array_for), Type{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Base.Generator{Array{Float64, 1}, JuTrack.var"#50#51"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, 1}, JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, 1}, Base.Generator{Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.var"#54#55"{6, Float64}}, Int64, Int64})
precompile(Tuple{JuTrack.var"#54#55"{6, Float64}, JuTrack.MARKER{Float64}})
precompile(Tuple{Type{JuTrack.MARKER{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, String})
precompile(Tuple{JuTrack.var"#54#55"{6, Float64}, JuTrack.KQUAD{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{6, Float64}, JuTrack.CORRECTOR{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{6, Float64}, JuTrack.SBEND{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{6, Float64}, JuTrack.KSEXT{Float64}})
precompile(Tuple{typeof(BenchmarkTools.prunekwargs), Any})
precompile(Tuple{typeof(Base.Iterators.drop), Tuple{Expr}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Drop{Tuple{Expr}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Array{Expr, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Array{Expr, 1}}, Int64, Int64})
precompile(Tuple{typeof(BenchmarkTools.hasevals), Array{Expr, 1}})
precompile(Tuple{typeof(BenchmarkTools.benchmarkable_parts), Any})
precompile(Tuple{typeof(Base.deleteat!), Array{Expr, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Nothing, Nothing, Array{Symbol, 1}, Array{Expr, 1}, Array{Expr, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Nothing, Nothing, Array{Symbol, 1}, Array{Expr, 1}, Array{Expr, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.map!), typeof(Base.esc), Array{Expr, 1}, Array{Expr, 1}})
precompile(Tuple{typeof(BenchmarkTools.collectvars), Expr})
precompile(Tuple{typeof(Base.filter), BenchmarkTools.var"#61#62"{Array{Any, 1}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{Expr}, Symbol, Array{Expr, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Expr}, Tuple{Base.RefValue{Symbol}, Array{Expr, 1}}}})
precompile(Tuple{Type{BenchmarkTools.Parameters}})
precompile(Tuple{typeof(BenchmarkTools.generate_benchmark_definition), Vararg{Any, 9}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.map), Function, Base.Iterators.Enumerate{Array{Symbol, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, BenchmarkTools.var"#63#67", Base.Iterators.Enumerate{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Symbol, 1}}, BenchmarkTools.var"#63#67"}})
precompile(Tuple{Type{Base.Dict{Symbol, Symbol}}, Array{Pair{Symbol, Symbol}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, BenchmarkTools.var"#59#60"{Base.Dict{Symbol, Symbol}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, BenchmarkTools.var"#59#60"{Base.Dict{Symbol, Symbol}}}})
precompile(Tuple{BenchmarkTools.var"#59#60"{Base.Dict{Symbol, Symbol}}, Symbol})
precompile(Tuple{Type{Array{Symbol, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, BenchmarkTools.var"#59#60"{Base.Dict{Symbol, Symbol}}}, Int64})
precompile(Tuple{BenchmarkTools.var"#59#60"{Base.Dict{Symbol, Symbol}}, Expr})
precompile(Tuple{BenchmarkTools.var"#59#60"{Base.Dict{Symbol, Symbol}}, Float64})
precompile(Tuple{Type{Array{Float64, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Any, 1}, BenchmarkTools.var"#59#60"{Base.Dict{Symbol, Symbol}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, BenchmarkTools.var"#59#60"{Base.Dict{Symbol, Symbol}}}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Module, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), Module, Expr, Nothing, Nothing, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, Nothing, Int64})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Any, 1}, Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.get!), BenchmarkTools.var"#64#68"{Module, Array{Symbol, 1}, Array{Any, 1}, Array{Symbol, 1}, Expr, Nothing, Nothing}, Base.Dict{Any, Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.hash), Expr, UInt64})
precompile(Tuple{typeof(Base.hash), Float64, UInt64})
precompile(Tuple{Type{BenchmarkTools.Benchmark}, Function, Tuple{}, BenchmarkTools.Parameters})
precompile(Tuple{typeof(BenchmarkTools.tune!), BenchmarkTools.Benchmark})
precompile(Tuple{typeof(BenchmarkTools._lineartrial), BenchmarkTools.Benchmark, BenchmarkTools.Parameters})
precompile(Tuple{Main.var"###sample#236", Tuple{}, BenchmarkTools.Parameters})
precompile(Tuple{typeof(Base.setindex), StaticArraysCore.SArray{Tuple{6}, Float64, 1, 6}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#73#75"{Array{Float64, 1}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#53#54"{6, Float64}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{6, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{6, Float64}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{6, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{6, Float64}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#49#50"{6, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{6, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{6, Float64}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{6, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{6, Float64}}, Int64})
precompile(Tuple{typeof(Main.fast_TPSA_jacobian), Vararg{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 6}})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(6,)}, StaticArraysCore.Size{(6,)}})
precompile(Tuple{typeof(Base.:(+)), JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}})
precompile(Tuple{typeof(Base.argtail), StaticArrays.SOneTo{6}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}})
precompile(Tuple{typeof(Base.:(^)), JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, JuTrack.TPSAadStatic.DTPSAD{6, Float64}})
precompile(Tuple{typeof(Base.:(-)), Float64, JuTrack.TPSAadStatic.DTPSAD{6, Float64}})
precompile(Tuple{typeof(Base.sqrt), JuTrack.TPSAadStatic.DTPSAD{6, Float64}})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, JuTrack.TPSAadStatic.DTPSAD{6, Float64}})
precompile(Tuple{Type{JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 2}, Int64, Int64, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Array{Int64, 1}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Float64, Int64, Int64, Array{Int64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{6, Float64}})
precompile(Tuple{typeof(JuTrack.ringpass!), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, 1}, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Float64})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.KQUAD{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.CORRECTOR{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.SBEND{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.KSEXT{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{6, Float64}}})
precompile(Tuple{typeof(Base.length), Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}})
precompile(Tuple{typeof(Base.view), Array{Float64, 2}, Int64, Function})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{6, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), JuTrack.TPSAadStatic.DTPSAD{6, Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.identity), StaticArraysCore.SArray{Tuple{6}, Float64, 1, 6}})
precompile(Tuple{StaticArrays.var"##s26#170", Vararg{Any, 7}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#171#173", Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, StaticArrays.var"#171#173"}})
precompile(Tuple{StaticArrays.var"#171#173", Type})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, StaticArrays.var"#171#173"}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Tuple{Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#172#174"{Base.IteratorsMD.CartesianIndex{1}}, Base.Iterators.Enumerate{Array{Tuple{Int64}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Int64}, 1}}, StaticArrays.var"#172#174"{Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Int64}, 1}}, StaticArrays.var"#172#174"{Base.IteratorsMD.CartesianIndex{1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{StaticArraysCore.SArray{Tuple{6}, Float64, 1, 6}}}})
precompile(Tuple{typeof(Base.first), Tuple{Float64, Float64, Int64, Int64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.min)}, Symbol})
precompile(Tuple{typeof(Base.minimum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Float64})
precompile(Tuple{typeof(BenchmarkTools.guessevals), Int64})
precompile(Tuple{typeof(Base.setproperty!), BenchmarkTools.Parameters, Symbol, Int64})
precompile(Tuple{Type{NamedTuple{(:warmup,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:warmup,), Tuple{Bool}}, typeof(BenchmarkTools.run_result), BenchmarkTools.Benchmark})
precompile(Tuple{Base.var"##s128#279", Vararg{Any, 5}})
precompile(Tuple{Type{NamedTuple{(:evals,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:warmup,), Tuple{Bool}}, typeof(BenchmarkTools._run), BenchmarkTools.Benchmark, BenchmarkTools.Parameters})
precompile(Tuple{typeof(Base.push!), BenchmarkTools.Trial, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{BenchmarkTools.Trial, Array{Float64, 2}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{BenchmarkTools.Trial, Array{Float64, 2}}, Int64, Int64})
precompile(Tuple{typeof(Base.minimum), BenchmarkTools.Trial})
precompile(Tuple{typeof(BenchmarkTools.allocs), BenchmarkTools.TrialEstimate})
precompile(Tuple{typeof(Base.Libc.time), BenchmarkTools.TrialEstimate})
precompile(Tuple{typeof(BenchmarkTools.prettytime), Float64})
precompile(Tuple{typeof(BenchmarkTools.memory), BenchmarkTools.TrialEstimate})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{3}})
precompile(Tuple{typeof(BenchmarkTools.prettymemory), Int64})
precompile(Tuple{typeof(Base.println), String, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, String, Vararg{Any}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Int64, Int64})
precompile(Tuple{Main.var"###sample#243", Tuple{}, BenchmarkTools.Parameters})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:E0, :m0), Tuple{Float64, Float64}}, typeof(JuTrack.ringpass_TPSA!), Array{JuTrack.AbstractElement{Float64}, 1}, Array{JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:E0, :m0), Tuple{Float64, Float64}}, typeof(JuTrack.pass_TPSA!), JuTrack.RFCA{Float64}, Array{JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, 1}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Float64, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, Float64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:E0, :m0), Tuple{Float64, Float64}}, typeof(JuTrack.pass_TPSA!), JuTrack.DRIFT{Float64}, Array{JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, 1}})
precompile(Tuple{Type{MethodError}, Any, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:E0, :m0), Tuple{Float64, Float64}}, typeof(JuTrack.pass_TPSA!), JuTrack.KQUAD{Float64}, Array{JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, 1}})
precompile(Tuple{typeof(Base.:(*)), JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, Float64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:E0, :m0), Tuple{Float64, Float64}}, typeof(JuTrack.pass_TPSA!), JuTrack.CORRECTOR{Float64}, Array{JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:E0, :m0), Tuple{Float64, Float64}}, typeof(JuTrack.pass_TPSA!), JuTrack.SBEND{Float64}, Array{JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, 1}})
precompile(Tuple{typeof(Base.fill!), Array{Float64, 1}, Float64})
precompile(Tuple{Type{JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}}, Int64, Int64, Array{Float64, 1}, Base.RefValue{JuTrack.HighOrderTPS.PolyMap}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:E0, :m0), Tuple{Float64, Float64}}, typeof(JuTrack.pass_TPSA!), JuTrack.KSEXT{Float64}, Array{JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), JuTrack.HighOrderTPS.CTPS{Float64, 6, 1}, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Main.spear3)})
precompile(Tuple{typeof(JuTrack.Number2TPSAD), Array{JuTrack.AbstractElement{Float64}, 1}, Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{JuTrack.var"#54#55"{2, Float64}, JuTrack.RFCA{Float64}})
precompile(Tuple{Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Float64, StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}})
precompile(Tuple{Type{JuTrack.RFCA{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, String})
precompile(Tuple{typeof(Base._array_for), Type{JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Base.Generator{Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.var"#54#55"{2, Float64}}, Int64})
precompile(Tuple{JuTrack.var"#54#55"{2, Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base._array_for), Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Base.Generator{Array{Float64, 1}, JuTrack.var"#50#51"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Base.Generator{Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.var"#54#55"{2, Float64}}, Int64, Int64})
precompile(Tuple{JuTrack.var"#54#55"{2, Float64}, JuTrack.MARKER{Float64}})
precompile(Tuple{Type{JuTrack.MARKER{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, String})
precompile(Tuple{JuTrack.var"#54#55"{2, Float64}, JuTrack.KQUAD{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{2, Float64}, JuTrack.CORRECTOR{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{2, Float64}, JuTrack.SBEND{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{2, Float64}, JuTrack.KSEXT{Float64}})
precompile(Tuple{typeof(JuTrack.findelem), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Symbol, String})
precompile(Tuple{typeof(Base.in), Symbol, NTuple{9, Symbol}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), Symbol, NTuple{18, Symbol}})
precompile(Tuple{typeof(Base.in), Symbol, NTuple{27, Symbol}})
precompile(Tuple{typeof(JuTrack.findelem), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Type})
precompile(Tuple{typeof(Base.length), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), JuTrack.KSEXT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Float64, Int64})
precompile(Tuple{Type{Printf.Format{S, T} where T where S}, Base.CodeUnits{UInt8, String}, Array{Base.UnitRange{Int64}, 1}, Tuple{Printf.Spec{Base.Val{Char(0x64000000)}}, Vararg{Printf.Spec{Base.Val{Char(0x66000000)}}, 5}}, Int64})
precompile(Tuple{Type{NamedTuple{(:lr, :max_iter), T} where T<:Tuple}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.var"#176#178", Base.BottomRF{typeof(Base.add_sum)}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Complex{Bool}})
precompile(Tuple{typeof(Base.:(+)), Float64, Base.Complex{Float64}})
precompile(Tuple{Type{Base.Complex{T} where T<:Real}, Float64, Float64})
precompile(Tuple{typeof(Base.:(-)), Base.Complex{Bool}})
precompile(Tuple{typeof(Base.:(*)), Base.Complex{Bool}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Float64})
precompile(Tuple{typeof(Base.convert), Type{Base.Complex{Float64}}, Int64})
precompile(Tuple{typeof(Base.:(*)), Base.Complex{Float64}, Int64})
precompile(Tuple{typeof(Base.:(-)), Base.Complex{Float64}})
precompile(Tuple{typeof(Base.isempty), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.rm_singleton_indices), Tuple{Bool}, Base.UnitRange{Int64}})
precompile(Tuple{Base.var"#182#184"{Tuple{Bool}, Tuple{Int64}, Float64}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:lr, :max_iter), Tuple{Float64, Int64}}, typeof(Main.gradient_descent), Float64, Float64})
precompile(Tuple{typeof(Base.setindex), StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#71#72"{Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Main.f), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Int64})
precompile(Tuple{typeof(Base.setproperty!), JuTrack.KSEXT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Symbol, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#49#50"{2, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{2, Float64}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{2, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{2, Float64}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#53#54"{2, Float64}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{2, Float64}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{2, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{2, Float64}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(2,)}, StaticArraysCore.Size{(2,)}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:init,), Tuple{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Tuple{Symbol}, NamedTuple{(:init,), Tuple{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}}}})
precompile(Tuple{typeof(Base.ntuple), StaticArraysCore.var"#5#6", Base.Val{2}})
precompile(Tuple{typeof(Base.convert), Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.convert), Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}, Base.Iterators.Enumerate{Array{Tuple{Int64}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Int64}, 1}}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Enumerate{Array{Tuple{Int64}, 1}}, StaticArrays.var"#167#169"{Base.IteratorsMD.CartesianIndex{1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(JuTrack.computeRDT), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(+)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(^)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(-)), Float64, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.sqrt), JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{Type{JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Int64, Int64, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Array{Int64, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Float64, Int64, Int64, Array{Int64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.KQUAD{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.CORRECTOR{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.SBEND{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.KSEXT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, Tuple{Int64, Int64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Float64})
precompile(Tuple{typeof(Base.zeros), Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Float64, Int64, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(+)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(-)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.transpose), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}})
precompile(Tuple{typeof(Base._getindex), Base.IndexCartesian, LinearAlgebra.Transpose{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:mode,), Tuple{Int64}}, Type{JuTrack.EdwardsTengTwiss{T} where T}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(LinearAlgebra.tr), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(<)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Float64})
precompile(Tuple{typeof(Base.:(>)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Float64})
precompile(Tuple{typeof(Base.abs), JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(==)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.:(<)), Float64, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.sign), JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(-)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}})
precompile(Tuple{typeof(JuTrack.inv1), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64})
precompile(Tuple{Type{JuTrack.EdwardsTengTwiss{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, typeof(Base.to_index), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Int64, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}})
precompile(Tuple{typeof(Base.zeros), Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.copy), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 3}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 3}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{JuTrack.var"#210#212", JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, JuTrack.var"#210#212", Tuple{Base.Broadcast.Extruded{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Bool}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, JuTrack.var"#210#212", Tuple{Base.Broadcast.Extruded{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{JuTrack.var"#210#212", JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{JuTrack.var"#210#212", JuTrack.MARKER{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{JuTrack.var"#210#212", JuTrack.KQUAD{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{JuTrack.var"#210#212", JuTrack.CORRECTOR{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{JuTrack.var"#210#212", JuTrack.SBEND{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{JuTrack.var"#210#212", JuTrack.KSEXT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(Base.hcat), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.lastindex), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.to_indices), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Array{Int64, 1}, Base.Colon}})
precompile(Tuple{typeof(Base._getindex), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.zeros), Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Int64})
precompile(Tuple{typeof(Base.eachindex), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getproperty), JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), JuTrack.KQUAD{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), JuTrack.CORRECTOR{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), JuTrack.SBEND{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Symbol})
precompile(Tuple{typeof(Base.hcat), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}})
precompile(Tuple{typeof(JuTrack.betadrift), Vararg{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, 4}})
precompile(Tuple{typeof(Base._setindex!), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(!=)), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.size), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}})
precompile(Tuple{typeof(Base.zeros), Type{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.var"#211#213"{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.OneTo{Int64}, JuTrack.var"#211#213"{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Base.Generator{Base.OneTo{Int64}, JuTrack.var"#211#213"{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{Int64, 1}, Function})
precompile(Tuple{typeof(JuTrack.betafoc), Vararg{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, 5}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(JuTrack.dispfoc), Vararg{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, 4}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}}}})
precompile(Tuple{typeof(JuTrack.get_len), JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.get_len), JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.get_len), JuTrack.MARKER{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.get_len), JuTrack.KQUAD{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.get_len), JuTrack.CORRECTOR{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.get_len), JuTrack.SBEND{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(JuTrack.get_len), JuTrack.KSEXT{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Base.Generator{Base.OneTo{Int64}, JuTrack.var"#234#239"{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Base.Generator{Base.OneTo{Int64}, JuTrack.var"#235#240"{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Base.Generator{Base.OneTo{Int64}, JuTrack.var"#236#241"{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(/)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(/)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Base.Generator{Base.OneTo{Int64}, JuTrack.var"#237#242"{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Base.Generator{Base.OneTo{Int64}, JuTrack.var"#238#243"{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(*)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}})
precompile(Tuple{Type{Array{JuTrack.DrivingTermsTPSAD{2}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.:(-)), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.lastindex), Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}})
precompile(Tuple{typeof(Base.vect), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Vararg{JuTrack.TPSAadStatic.DTPSAD{2, Float64}}})
precompile(Tuple{Type{JuTrack.DrivingTermsTPSAD{2}}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}, JuTrack.TPSAadStatic.DTPSAD{2, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.DrivingTermsTPSAD{2}, 1}, JuTrack.DrivingTermsTPSAD{2}, Int64})
precompile(Tuple{typeof(Main.obj), Array{JuTrack.DrivingTermsTPSAD{2}, 1}})
precompile(Tuple{typeof(Base.:(+)), Vararg{JuTrack.TPSAadStatic.DTPSAD{2, Float64}, 5}})
precompile(Tuple{typeof(Base.getproperty), JuTrack.TPSAadStatic.DTPSAD{2, Float64}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.length), Tuple{Tuple{StaticArrays.SOneTo{2}}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.IteratorsMD.CartesianIndices{1, Tuple{StaticArrays.SOneTo{2}}}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{StaticArrays.SOneTo{2}}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{StaticArrays.SOneTo{2}}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Base.checkbounds), StaticArrays.SOneTo{2}, Int64})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{2}, Int64})
precompile(Tuple{typeof(Base.collect), StaticArraysCore.SArray{Tuple{2}, Float64, 1, 2}})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Printf.format), Base.TTY, Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Base.Val{Char(0x64000000)}}, Vararg{Printf.Spec{Base.Val{Char(0x66000000)}}, 5}}}, Int64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Printf.format), Array{UInt8, 1}, Int64, Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Base.Val{Char(0x64000000)}}, Vararg{Printf.Spec{Base.Val{Char(0x66000000)}}, 5}}}, Int64, Vararg{Any}})
precompile(Tuple{typeof(Printf.rmdynamic), Printf.Spec{Base.Val{Char(0x64000000)}}, Tuple{Int64, Vararg{Float64, 5}}, Int64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex), StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}, Float64, Int64})
precompile(Tuple{Type{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, Float64, StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}})
precompile(Tuple{typeof(Base.:(-)), Base.Irrational{:π}, Float64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Float64, Int64})
precompile(Tuple{typeof(Base.min), Float64, Float64})
precompile(Tuple{Type{JuTrack.PureErrorFunctions.ErfConsts{Float64}}, Vararg{Float64, 9}})
precompile(Tuple{typeof(JuTrack.PureErrorFunctions.toT), Type{Float64}, NTuple{5, Float64}})
precompile(Tuple{typeof(JuTrack.PureErrorFunctions.toT), Type{Float64}, NTuple{4, Float64}})
precompile(Tuple{typeof(JuTrack.PureErrorFunctions.toT), Type{Float64}, NTuple{9, Float64}})
precompile(Tuple{typeof(JuTrack.PureErrorFunctions.toT), Type{Float64}, NTuple{8, Float64}})
precompile(Tuple{typeof(JuTrack.PureErrorFunctions.toT), Type{Float64}, NTuple{6, Float64}})
precompile(Tuple{typeof(Base.getproperty), JuTrack.PureErrorFunctions.ErfConsts{Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Float64}, Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:freq, :halfthetac), T} where T<:Tuple}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.cconvert), Type, NTuple{8, VecElement{UInt64}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{NTuple{8, VecElement{UInt64}}}, NTuple{8, VecElement{UInt64}}})
precompile(Tuple{typeof(Base.getproperty), Base.FlatteningRF{Base.BottomRF{typeof(Base.add_sum)}}, Symbol})
precompile(Tuple{Type{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#49#50"{3, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{3, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{3, Float64}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{3, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{3, Float64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Float64}, Base.IteratorsMD.CartesianIndex{0}})
precompile(Tuple{typeof(Base.ntuple), StaticArraysCore.var"#5#6", Base.Val{3}})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{3}, Base.Complex{Float64}, 1, 3}}, Tuple{Base.Complex{Float64}, Base.Complex{Float64}, Base.Complex{Float64}}})
precompile(Tuple{typeof(Base.:(*)), Base.Complex{Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Base.Complex{Float64}, Int64, Float64})
precompile(Tuple{typeof(Main.f1), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:freq, :volt, :h, :phis), Tuple{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Float64, Float64, Float64}}, Type{JuTrack.AccelCavity{T} where T}})
precompile(Tuple{Type{JuTrack.LongitudinalRFMap{T} where T}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.AccelCavity{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}})
precompile(Tuple{typeof(Base.zeros), Type{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#53#54"{3, Float64}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{3, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{3, Float64}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{3, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{3, Float64}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:np, :energy, :emittance), Tuple{Int64, Float64, Array{Float64, 1}}}, Type{JuTrack.Beam{T} where T}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}})
precompile(Tuple{typeof(Base.:(+)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.:(^)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.:(-)), Float64, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.sqrt), JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{Type{JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}, Int64, Int64, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Array{Int64, 1}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Float64, Int64, Int64, Array{Int64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.convert), Type{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, Float64})
precompile(Tuple{typeof(JuTrack.initilize_6DGaussiandist!), JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, JuTrack.optics4DUC, JuTrack.LongitudinalRFMap{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{LinearAlgebra.var"#17#18", Base.BottomRF{typeof(Base.add_sum)}}, Symbol})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{LinearAlgebra.Adjoint{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}}}, Int64})
precompile(Tuple{typeof(Base.isvarargtype), Any})
precompile(Tuple{typeof(Base._similar_shape), Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Base.var"#13#14"{DataType}, Int64})
precompile(Tuple{typeof(Base.Iterators.map), Function, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.any), Function, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._any), Base.var"#58#59", Tuple{DataType, DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(JuTrack.classical_gram_schmidt), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}})
precompile(Tuple{typeof(Base.convert), Type{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}})
precompile(Tuple{Base.MappingRF{JuTrack.var"#316#320"{Int64}, Base.BottomRF{typeof(Base.add_sum)}}, Base._InitialValue, Int64})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Base.Val{2}})
precompile(Tuple{typeof(Base.reduce_first), typeof(Base.add_sum), JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{Base.MappingRF{JuTrack.var"#316#320"{Int64}, Base.BottomRF{typeof(Base.add_sum)}}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Int64})
precompile(Tuple{typeof(Base.add_sum), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base._foldl_impl), Base.FilteringRF{JuTrack.var"#317#321"{Int64}, Base.MappingRF{JuTrack.var"#316#320"{Int64}, Base.BottomRF{typeof(Base.add_sum)}}}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(<)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Float64})
precompile(Tuple{typeof(JuTrack.diag1), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.sqrt), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sqrt), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sqrt), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}}}}}})
precompile(Tuple{typeof(JuTrack.diagm1), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}})
precompile(Tuple{typeof(Base.transpose), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}, LinearAlgebra.Transpose{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 2}}})
precompile(Tuple{typeof(Base.:(+)), Vararg{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 6}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Int64})
precompile(Tuple{typeof(Base.cos), JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.abs), JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Int64})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.getproperty), JuTrack.optics2D, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Float64, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}}, Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}}, Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}}, Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Float64}}, Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.sqrt), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sqrt), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sqrt), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Base.RefValue{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, Float64}}}}}}})
precompile(Tuple{typeof(JuTrack.get_emittance!), JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.println), String, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Vararg{Any}})
precompile(Tuple{Type{Pair{Symbol, Any}}, Any, Any})
precompile(Tuple{typeof(Base.print), Base.TTY, JuTrack.TPSAadStatic.DTPSAD{3, Float64}})
precompile(Tuple{typeof(Base.show), Base.TTY, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.LinearIndices{1, Tuple{StaticArrays.SOneTo{3}}}, Symbol})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}})
precompile(Tuple{typeof(JuTrack.TPSAadStatic.Jacobian), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{JuTrack.TPSAadStatic.DTPSAD{3, Float64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#73#75"{Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.length), Array{JuTrack.TPSAadStatic.DTPSAD{3, Float64}, 1}})
precompile(Tuple{typeof(Base.getproperty), JuTrack.TPSAadStatic.DTPSAD{3, Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.identity), StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{StaticArraysCore.SArray{Tuple{3}, Float64, 1, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.range), Int64, Int64})
precompile(Tuple{typeof(Base.println), String, Array{Float64, 2}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Array{Float64, 2}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Pair{Symbol, DataType}, Int64})
precompile(Tuple{typeof(Base.print), Base.TTY, Array{Float64, 2}})
precompile(Tuple{typeof(Base.isempty), Array{Float64, 2}})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{Type{StaticArraysCore.SArray{Tuple{1}, Float64, 1, 1}}, Tuple{Float64}})
precompile(Tuple{typeof(Base.setindex), StaticArraysCore.SArray{Tuple{1}, Float64, 1, 1}, Float64, Int64})
precompile(Tuple{Type{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Float64, StaticArraysCore.SArray{Tuple{1}, Float64, 1, 1}})
precompile(Tuple{typeof(Base._array_for), Type{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#73#75"{Array{Float64, 1}}}, Int64})
precompile(Tuple{Type{Tuple{Vararg{Int64, N}} where N}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Main.f), JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:freq, :Rshunt, :Q0), Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}}}, Type{JuTrack.LongitudinalRLCWake{T} where T}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:len,), Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}}, Type{JuTrack.DRIFT{T} where T}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{Type{Base.Fix1{F, T} where T where F}, typeof(Base.to_index), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{Type{JuTrack.DRIFT{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{Float64, 1}, Array{Float64, 1}, String})
precompile(Tuple{typeof(Base.argtail), StaticArrays.SOneTo{1}})
precompile(Tuple{typeof(Base.:(/)), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#53#54"{1, Float64}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{1, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{1, Float64}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{1, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, JuTrack.TPSAadStatic.var"#53#54"{1, Float64}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#49#50"{1, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{1, Float64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{1, Float64}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{1, Float64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#49#50"{1, Float64}}, Int64})
precompile(Tuple{Type{JuTrack.Beam{T} where T}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(Base.:(==)), StaticArraysCore.Size{(1,)}, StaticArraysCore.Size{(1,)}})
precompile(Tuple{typeof(Base.:(+)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(^)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(-)), Float64, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.sqrt), JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{Type{JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Int64, Int64, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Array{Int64, 1}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Float64, Int64, Int64, Array{Int64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.convert), Type{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Float64})
precompile(Tuple{typeof(JuTrack.histogram1DinZ!), JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(Base.vect), JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}}, JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, JuTrack.LongitudinalRLCWake{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(JuTrack.linepass!), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, 1}, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(Base.ntuple), StaticArraysCore.var"#5#6", Base.Val{1}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.LongitudinalRLCWake{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(Base.zeros), Type{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}}}, Float64}}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.:(-)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(JuTrack.wakefieldfunc_RLCWake), JuTrack.LongitudinalRLCWake{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(/)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Int64})
precompile(Tuple{Type{Base.SubArray{T, N, P, I, L} where L where I where P where N where T}, Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, Tuple{Bool}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(+)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.Broadcast.DefaultArrayStyle{1}, Base.SubArray{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}}}, Float64}}})
precompile(Tuple{typeof(Base.:(*)), Int64, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(JuTrack.get_emittance!), JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(Base.collect), Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(Base.length), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}})
precompile(Tuple{typeof(Base.getproperty), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.identity), StaticArraysCore.SArray{Tuple{1}, Float64, 1, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.LinearIndices{1, Tuple{StaticArrays.SOneTo{1}}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.LinearIndices{1, Tuple{StaticArrays.SOneTo{1}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{StaticArraysCore.SArray{Tuple{1}, Float64, 1, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuTrack.TPSAadStatic.var"#74#76", Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, JuTrack.TPSAadStatic.var"#74#76"}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.println), String, Array{Float64, 1}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Array{Float64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(/)), Base.Irrational{:π}, Float64})
precompile(Tuple{typeof(Base.asin), Float64})
precompile(Tuple{typeof(Base.:(-)), Int64, Float64})
precompile(Tuple{typeof(Base.:(+)), Vararg{Float64, 6}})
precompile(Tuple{typeof(Base.:(+)), Vararg{Float64, 4}})
precompile(Tuple{typeof(Base.:(+)), Float64, Float64, Float64, Float64, Float64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Vararg{Float64, 6}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{16, Symbol}})
precompile(Tuple{typeof(Main.CHICANE), Float64, Float64, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :PolynomB), Tuple{String, Array{Float64, 1}}}, Type{JuTrack.thinMULTIPOLE{T} where T}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :len, :angle), Tuple{String, Float64, Float64}}, Type{JuTrack.SBEND{T} where T}})
precompile(Tuple{typeof(Base.vect), JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}})
precompile(Tuple{Type{NamedTuple{(:name, :len, :angle, :rad), T} where T<:Tuple}, Tuple{String, Float64, Float64, Int64}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{24, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :len, :angle, :rad), Tuple{String, Float64, Float64, Int64}}, typeof(JuTrack.RBEND)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :len, :k1), Tuple{String, Float64, Float64}}, Type{JuTrack.QUAD{T} where T}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :len), Tuple{String, Float64}}, Type{JuTrack.QUAD{T} where T}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :len), Tuple{String, Float64}}, typeof(JuTrack.HKICKER)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :len), Tuple{String, Float64}}, typeof(JuTrack.VKICKER)})
precompile(Tuple{Type{NamedTuple{(:name, :len, :ks), T} where T<:Tuple}, Tuple{String, Float64, Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :len, :ks), Tuple{String, Float64, Float64}}, Type{JuTrack.SOLENOID{T} where T}})
precompile(Tuple{Type{NamedTuple{(:name, :len, :volt, :h, :lag, :freq, :energy), T} where T<:Tuple}, Tuple{String, Vararg{Float64, 6}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :len, :volt, :h, :lag, :freq, :energy), Tuple{String, Vararg{Float64, 6}}}, Type{JuTrack.RFCA{T} where T}})
precompile(Tuple{Type{NamedTuple{(:name, :len, :volt, :freq), T} where T<:Tuple}, Tuple{String, Float64, Float64, Float64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name, :len, :volt, :freq), Tuple{String, Float64, Float64, Float64}}, Type{JuTrack.CRABCAVITY{T} where T}})
precompile(Tuple{typeof(Base.getproperty), JuTrack.DRIFT{Float64}, Symbol})
precompile(Tuple{typeof(Base.getproperty), JuTrack.QUAD{Float64}, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:name,), Tuple{String}}, Type{JuTrack.MARKER{T} where T}})
precompile(Tuple{typeof(Base.vect), JuTrack.MARKER{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.QUAD{Float64}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.CRABCAVITY{Float64}})
precompile(Tuple{typeof(Base.vect), JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CRABCAVITY{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CRABCAVITY{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CRABCAVITY{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.MARKER{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.MARKER{Float64}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.MARKER{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.MARKER{Float64}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.MARKER{Float64}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.MARKER{Float64}})
precompile(Tuple{typeof(Base.vect), JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.SOLENOID{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, Vararg{Any}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.SOLENOID{Float64}})
precompile(Tuple{typeof(Main.FODOCELL_1), JuTrack.KSEXT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.CORRECTOR{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.thinMULTIPOLE{Float64}})
precompile(Tuple{typeof(Main.FODOCELL_3), JuTrack.KSEXT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.CORRECTOR{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Main.FODOCELL_5), JuTrack.KSEXT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.CORRECTOR{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Main.FODOCELL_7), JuTrack.KSEXT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.CORRECTOR{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Main.FODOCELL_9), JuTrack.KSEXT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.CORRECTOR{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Main.FODOCELL_11), JuTrack.KSEXT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.CORRECTOR{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.DRIFT{Float64}, JuTrack.thinMULTIPOLE{Float64}, JuTrack.SBEND{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.RFCA{Float64}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.RFCA{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.reverse), Array{JuTrack.AbstractElement{Float64}, 1}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CRABCAVITY{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.QUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{Type{UInt8}, Int32})
precompile(Tuple{typeof(Base.:(<<)), UInt8, Int64})
precompile(Tuple{typeof(Base.:(|)), UInt8, UInt8})
precompile(Tuple{typeof(Base.:(<)), Int32, Int32})
precompile(Tuple{typeof(Serialization.serialize), String, Array{JuTrack.AbstractElement{Float64}, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Float64})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Float64, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.vect), JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Vararg{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(JuTrack.TPSAadStatic.Jacobian), Function, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}})
precompile(Tuple{typeof(Base.struct_subpadding), Type{NTuple{4, UInt8}}, Type{UInt32}})
precompile(Tuple{Type{NamedTuple{(:energy, :current, :mass, :charge), T} where T<:Tuple}, NTuple{4, Float64}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{22, Symbol}})
precompile(Tuple{typeof(Main.f), Vararg{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 7}})
precompile(Tuple{typeof(Base.get!), Random.var"#1#2", Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:energy, :current, :mass, :charge), NTuple{4, Float64}}, Type{JuTrack.Beam{T} where T}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{JuTrack.TPSAadStatic.DTPSAD{N, T} where T<:Number where N}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{JuTrack.DRIFT_SC{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{Float64, 1}, Array{Float64, 1}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Int64, Int64, Int64, String})
precompile(Tuple{Type{JuTrack.KQUAD_SC{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, Int64, Int64, Int64, Int64, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 2}, Array{Float64, 1}, Array{Float64, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, JuTrack.TPSAadStatic.DTPSAD{7, Float64}, Int64, Int64, Int64, String})
precompile(Tuple{typeof(Base.vect), JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.KQUAD_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.KQUAD_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.KQUAD_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}}, JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.KQUAD_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, 1}}, Int64, JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.KQUAD_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.KQUAD_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(JuTrack.get_emittance!), JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{3}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Int64, Int64})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.DRIFT_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.KQUAD_SC{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{7, Float64}}})
precompile(Tuple{typeof(Base.length), Array{JuTrack.TPSAadStatic.DTPSAD{7, Float64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.identity), StaticArraysCore.SArray{Tuple{7}, Float64, 1, 7}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{StaticArraysCore.StaticArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{StaticArraysCore.SArray{Tuple{7}, Float64, 1, 7}}}})
precompile(Tuple{typeof(Base.:(-)), Float64, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64, Float64})
precompile(Tuple{typeof(Main.ssrf), Float64, Int64})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.MARKER{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.MARKER{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.MARKER{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), JuTrack.RFCA{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.MARKER{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#54#55", Type, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{JuTrack.AbstractElement{Float64}}, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#129#130"{Array{JuTrack.AbstractElement{Float64}, 1}}, Int64, JuTrack.RFCA{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.MARKER{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.SBEND{Float64}, JuTrack.SBEND{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KSEXT{Float64}, JuTrack.CORRECTOR{Float64}, JuTrack.DRIFT{Float64}, JuTrack.KQUAD{Float64}, Vararg{Any}})
precompile(Tuple{typeof(JuTrack.Number2TPSAD), Array{JuTrack.AbstractElement{Float64}, 1}, Type{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{JuTrack.var"#54#55"{1, Float64}, JuTrack.RFCA{Float64}})
precompile(Tuple{Type{JuTrack.RFCA{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, String})
precompile(Tuple{typeof(Base._array_for), Type{JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, 1}, JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Base.Generator{Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.var"#54#55"{1, Float64}}, Int64})
precompile(Tuple{JuTrack.var"#54#55"{1, Float64}, JuTrack.DRIFT{Float64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Base.Generator{Array{Float64, 1}, JuTrack.var"#50#51"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, 1}, JuTrack.DRIFT{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, 1}, Base.Generator{Array{JuTrack.AbstractElement{Float64}, 1}, JuTrack.var"#54#55"{1, Float64}}, Int64, Int64})
precompile(Tuple{JuTrack.var"#54#55"{1, Float64}, JuTrack.KQUAD{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{1, Float64}, JuTrack.MARKER{Float64}})
precompile(Tuple{Type{JuTrack.MARKER{T} where T}, String, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, String})
precompile(Tuple{JuTrack.var"#54#55"{1, Float64}, JuTrack.KSEXT{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{1, Float64}, JuTrack.SBEND{Float64}})
precompile(Tuple{JuTrack.var"#54#55"{1, Float64}, JuTrack.CORRECTOR{Float64}})
precompile(Tuple{typeof(Main.tuning_test), Float64})
precompile(Tuple{typeof(Main.twiss_test), JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(JuTrack.findelem), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, 1}, Symbol, String})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), JuTrack.KQUAD{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Symbol, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.getproperty), JuTrack.KQUAD{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:init,), Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Tuple{Symbol}, NamedTuple{(:init,), Tuple{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}}}})
precompile(Tuple{typeof(JuTrack.periodicEdwardsTengTwiss), Array{JuTrack.AbstractElement{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, 1}, Float64, Int64})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.RFCA{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.KQUAD{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.KSEXT{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.SBEND{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(JuTrack.pass!), JuTrack.CORRECTOR{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Int64, JuTrack.Beam{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, Tuple{Int64, Int64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Float64})
precompile(Tuple{typeof(Base.zeros), Type{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Float64, Int64, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(-)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.transpose), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(Base._getindex), Base.IndexCartesian, LinearAlgebra.Transpose{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:mode,), Tuple{Int64}}, Type{JuTrack.EdwardsTengTwiss{T} where T}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(JuTrack.symplectic_conjugate_2by2), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(Base.:(+)), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(LinearAlgebra.tr), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(JuTrack.det_small_matrix), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(Base.:(<)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Float64})
precompile(Tuple{typeof(Base.:(>)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Float64})
precompile(Tuple{typeof(Base.abs), JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(==)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.convert), Type{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.:(<)), Float64, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.sign), JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(-)), JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(JuTrack.inv1), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}})
precompile(Tuple{typeof(Base.getindex), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}})
precompile(Tuple{Type{JuTrack.EdwardsTengTwiss{JuTrack.TPSAadStatic.DTPSAD{1, Float64}}}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 2}, Int64})
precompile(Tuple{typeof(JuTrack.TPSAadStatic.Gradient), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{JuTrack.TPSAadStatic.DTPSAD{1, Float64}, 1}, JuTrack.TPSAadStatic.DTPSAD{1, Float64}, Base.Generator{Base.UnitRange{Int64}, JuTrack.TPSAadStatic.var"#71#72"{Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.length), Tuple{Tuple{StaticArrays.SOneTo{1}}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.IteratorsMD.CartesianIndices{1, Tuple{StaticArrays.SOneTo{1}}}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{StaticArrays.SOneTo{1}}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{StaticArrays.SOneTo{1}}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Base.get), Tuple{StaticArrays.SOneTo{1}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.checkbounds), StaticArrays.SOneTo{1}, Int64})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{1}, Int64})
precompile(Tuple{typeof(Base.collect), StaticArraysCore.SArray{Tuple{1}, Float64, 1, 1}})
precompile(Tuple{typeof(Base.print), Base.TTY, JuTrack.TPSAadStatic.DTPSAD{1, Float64}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, StaticArraysCore.SArray{Tuple{1}, Float64, 1, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{Enzyme.Compiler.JIT.var"#1#2"})
